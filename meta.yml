name: Free points!
description: |
  This is a Return-Oriented Programming Challenge (ROP) in assemply. The goal is to execute the function `win()`, while putting the value "3" in rax, and the value "2" in rbx.
  For this challenge, you are provided with a binary called "rop" where the challenge takes place, and an auxiliary binary called "hex2raw" which converts a hex string to raw bytes. Credit goes to the creators of the CMU attack lab for the creation of the hex2raw binary.

  The binary was compiled as follows: gcc -o rop rop.c -fno-stack-protector -no-pie -z execstack

  Notice there is no stack protection, so we can overwrite the return address of the function `bof()` with the address of `win()`. However, we need to put the values "3" and "2" in rax and rbx respectively, so we need to find a way to do that.

  hex2raw takes a .txt file, and converts it to raw bytes. The file should be in individual hex bytes separated by spaces.
  For example, proper formating of an input file "test.txt" could be:
  ```
  48 89 e5 48 83 ec 10 48 8d 3d 00 00 00 00 48 8d
  35 00 00 00 00 48 89 c7 48 89 d8 48 89 f9 48 89
  da 48 89 fb 48 89 fc 48 89 fd 48 89 fe 48 89 ff
  48 89 c6 b0 03 48 89 df b0 02 0f 05
  ```

  The size of the buffer to be overflowed is 40 bytes.

  gdb is your best friend in the entire world for this challenge. You can use it to disassemble the binary, and find the addresses of the gadgets you need.

  If you try to cheat, say by artifically injecting values into the registers with gdb and skipping some checks, your flag will not be the correct one, so be careful.

  Good luck!
value: 200
category: Assembly
flag: CTF_SDaT{Fr33_p01nt5!}

# administrative
container_name: misc-free-points
